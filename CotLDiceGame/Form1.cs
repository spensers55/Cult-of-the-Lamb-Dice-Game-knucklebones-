/* This code runs a game made by the developers of Cult of the Lamb, which they call knucklebones. I have decided to
 * recreate it because I like playing it with my wife and I thought it would be a fun challenge (I was right:) ).
 * The rules are simple:
 *      The game board has two grids of 9 squares, one grid for each player. each grid is divided into 3 columns
 *      The first player rolls a d6 die and places the die in one of the columns of their own grid
 *      The second player does the same
 *      The game continues until one of the grids is full
 *      If a player places a number in a column in which their opponent already has that number, the opponents dice matching
 *      that number are eliminated
 *      If a player places a number in a column in which they themself already have that number, the score of those dice is 
 *      multiplied by the number of matching dice in the column.
 *      The player with the higher score at the end wins.
 * I want to say again that I did not design this game, I simply recreated it for my own entertainment. As far as I'm aware,
 * the game was designed by Massive Monster.
 */
using System.ComponentModel;
using System.Reflection;
using System.Security.Cryptography;

namespace CotLDiceGame
{
    public partial class Game : Form
    {
        private int currentDie = 0; //the value rolled by clicking the roll button is stored here until placed
        private int[] top = { 0, 0, 0, 0, 0, 0, 0, 0, 0 }; //the game board is made up of these two arrays
        private int[] bottom = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };//0-2 are the 1st column, 3-5 are 2nd, 6-8 are 3rd
        private bool turn = true; //true is bottom's turn. false is top's turn

        //the following are form tools used by the application for various purposes
        //lbl stands for Label. b stands for Button. pb stands for PictureBox
        private Label lblTop;
        private Label lblBottom;
        private Label lblGameOver;
        private Label lblTopScore;
        private Label lblBottomScore;
        private Button bStartOver;
        private Button bRoll;
        private Button bLeft;
        private Button bMid;
        private Button bRight;
        private PictureBox pbCurrent;
        private PictureBox pbTop1;
        private PictureBox pbTop2;
        private PictureBox pbTop3;
        private PictureBox pbTop4;
        private PictureBox pbTop5;
        private PictureBox pbTop6;
        private PictureBox pbTop7;
        private PictureBox pbTop8;
        private PictureBox pbTop9;
        private PictureBox pbBottom1;
        private PictureBox pbBottom2;
        private PictureBox pbBottom3;
        private PictureBox pbBottom4;
        private PictureBox pbBottom5;
        private PictureBox pbBottom6;
        private PictureBox pbBottom7;
        private PictureBox pbBottom8;
        private PictureBox pbBottom9;

        //this function was automatically generated by the form designer
        public Game()
        {
            InitializeComponent();
        }

        /*input: none
         *this function uses the Random class to generate a pseudorandom d6 die roll
         *output: the int generated (a number between 1 and 6 inclusive)
         */
        private int rollDie()
        {
            Random die = new Random();
            return (int)die.NextInt64(6) + 1;

        }

        /* input: int col - value at which the column to be checked starts: 0 = left, 3 = mid, 6 = right
         * this function checks to see if all of the slots in a column of the bottom board are occupied
         * output: int - position of open spot in bottom array, input column. -1 if full
         */
        private int isColFullBottom(int col)
        {
            for (int i = 0; i < 3; i++)
            {
                if (bottom[col + i] == 0)//check if empty
                {
                    return i;//return: first empty slot
                }
            }
            return -1;//return: column full
        }

        /* input: int col - value at which the column to be checked starts: 0 = left, 3 = mid, 6 = right
         * this function checks to see if all of the slots in a column of the top board are occupied
         * output: int - position of open spot in top array, input column. -1 if full
         */
        private int isColFullTop(int col)
        {
            for (int i = 0; i < 3; i++)
            {
                if (top[col + i] == 0)//check if empty
                {
                    return i;//return: first empty slot
                }
            }
            return -1;//return: column full
        }

        //this function was automatically generated using Visual Studio's Form Designer
        private void InitializeComponent()
        {
            pbCurrent = new PictureBox();
            bRoll = new Button();
            pbTop1 = new PictureBox();
            pbTop2 = new PictureBox();
            pbTop3 = new PictureBox();
            pbTop4 = new PictureBox();
            pbTop5 = new PictureBox();
            pbTop6 = new PictureBox();
            pbTop7 = new PictureBox();
            pbTop8 = new PictureBox();
            pbTop9 = new PictureBox();
            pbBottom1 = new PictureBox();
            pbBottom2 = new PictureBox();
            pbBottom3 = new PictureBox();
            pbBottom4 = new PictureBox();
            pbBottom5 = new PictureBox();
            pbBottom6 = new PictureBox();
            pbBottom7 = new PictureBox();
            pbBottom8 = new PictureBox();
            pbBottom9 = new PictureBox();
            bLeft = new Button();
            bMid = new Button();
            bRight = new Button();
            lblTop = new Label();
            lblBottom = new Label();
            lblGameOver = new Label();
            bStartOver = new Button();
            lblTopScore = new Label();
            lblBottomScore = new Label();
            ((ISupportInitialize)pbCurrent).BeginInit();
            ((ISupportInitialize)pbTop1).BeginInit();
            ((ISupportInitialize)pbTop2).BeginInit();
            ((ISupportInitialize)pbTop3).BeginInit();
            ((ISupportInitialize)pbTop4).BeginInit();
            ((ISupportInitialize)pbTop5).BeginInit();
            ((ISupportInitialize)pbTop6).BeginInit();
            ((ISupportInitialize)pbTop7).BeginInit();
            ((ISupportInitialize)pbTop8).BeginInit();
            ((ISupportInitialize)pbTop9).BeginInit();
            ((ISupportInitialize)pbBottom1).BeginInit();
            ((ISupportInitialize)pbBottom2).BeginInit();
            ((ISupportInitialize)pbBottom3).BeginInit();
            ((ISupportInitialize)pbBottom4).BeginInit();
            ((ISupportInitialize)pbBottom5).BeginInit();
            ((ISupportInitialize)pbBottom6).BeginInit();
            ((ISupportInitialize)pbBottom7).BeginInit();
            ((ISupportInitialize)pbBottom8).BeginInit();
            ((ISupportInitialize)pbBottom9).BeginInit();
            SuspendLayout();
            // 
            // pbCurrent
            // 
            pbCurrent.Image = Properties.Resources.dieBlank;
            pbCurrent.Location = new Point(67, 211);
            pbCurrent.Name = "pbCurrent";
            pbCurrent.Size = new Size(50, 50);
            pbCurrent.TabIndex = 0;
            pbCurrent.TabStop = false;
            // 
            // bRoll
            // 
            bRoll.Location = new Point(67, 267);
            bRoll.Name = "bRoll";
            bRoll.Size = new Size(50, 30);
            bRoll.TabIndex = 1;
            bRoll.Text = "Roll";
            bRoll.UseVisualStyleBackColor = true;
            bRoll.Click += bRoll_onClick;
            // 
            // pbTop1
            // 
            pbTop1.Image = Properties.Resources.dieBlank;
            pbTop1.Location = new Point(220, 140);
            pbTop1.Name = "pbTop1";
            pbTop1.Size = new Size(50, 50);
            pbTop1.TabIndex = 2;
            pbTop1.TabStop = false;
            // 
            // pbTop2
            // 
            pbTop2.Image = Properties.Resources.dieBlank;
            pbTop2.Location = new Point(220, 84);
            pbTop2.Name = "pbTop2";
            pbTop2.Size = new Size(50, 50);
            pbTop2.TabIndex = 3;
            pbTop2.TabStop = false;
            // 
            // pbTop3
            // 
            pbTop3.Image = Properties.Resources.dieBlank;
            pbTop3.Location = new Point(220, 28);
            pbTop3.Name = "pbTop3";
            pbTop3.Size = new Size(50, 50);
            pbTop3.TabIndex = 4;
            pbTop3.TabStop = false;
            // 
            // pbTop4
            // 
            pbTop4.Image = Properties.Resources.dieBlank;
            pbTop4.Location = new Point(276, 140);
            pbTop4.Name = "pbTop4";
            pbTop4.Size = new Size(50, 50);
            pbTop4.TabIndex = 5;
            pbTop4.TabStop = false;
            // 
            // pbTop5
            // 
            pbTop5.Image = Properties.Resources.dieBlank;
            pbTop5.Location = new Point(276, 84);
            pbTop5.Name = "pbTop5";
            pbTop5.Size = new Size(50, 50);
            pbTop5.TabIndex = 6;
            pbTop5.TabStop = false;
            // 
            // pbTop6
            // 
            pbTop6.Image = Properties.Resources.dieBlank;
            pbTop6.Location = new Point(276, 28);
            pbTop6.Name = "pbTop6";
            pbTop6.Size = new Size(50, 50);
            pbTop6.TabIndex = 7;
            pbTop6.TabStop = false;
            // 
            // pbTop7
            // 
            pbTop7.Image = Properties.Resources.dieBlank;
            pbTop7.Location = new Point(332, 140);
            pbTop7.Name = "pbTop7";
            pbTop7.Size = new Size(50, 50);
            pbTop7.TabIndex = 8;
            pbTop7.TabStop = false;
            // 
            // pbTop8
            // 
            pbTop8.Image = Properties.Resources.dieBlank;
            pbTop8.Location = new Point(332, 84);
            pbTop8.Name = "pbTop8";
            pbTop8.Size = new Size(50, 50);
            pbTop8.TabIndex = 9;
            pbTop8.TabStop = false;
            // 
            // pbTop9
            // 
            pbTop9.Image = Properties.Resources.dieBlank;
            pbTop9.Location = new Point(332, 28);
            pbTop9.Name = "pbTop9";
            pbTop9.Size = new Size(50, 50);
            pbTop9.TabIndex = 10;
            pbTop9.TabStop = false;
            // 
            // pbBottom1
            // 
            pbBottom1.Image = Properties.Resources.dieBlank;
            pbBottom1.Location = new Point(220, 283);
            pbBottom1.Name = "pbBottom1";
            pbBottom1.Size = new Size(50, 50);
            pbBottom1.TabIndex = 11;
            pbBottom1.TabStop = false;
            // 
            // pbBottom2
            // 
            pbBottom2.Image = Properties.Resources.dieBlank;
            pbBottom2.Location = new Point(220, 339);
            pbBottom2.Name = "pbBottom2";
            pbBottom2.Size = new Size(50, 50);
            pbBottom2.TabIndex = 12;
            pbBottom2.TabStop = false;
            // 
            // pbBottom3
            // 
            pbBottom3.Image = Properties.Resources.dieBlank;
            pbBottom3.Location = new Point(220, 395);
            pbBottom3.Name = "pbBottom3";
            pbBottom3.Size = new Size(50, 50);
            pbBottom3.TabIndex = 13;
            pbBottom3.TabStop = false;
            // 
            // pbBottom4
            // 
            pbBottom4.Image = Properties.Resources.dieBlank;
            pbBottom4.Location = new Point(276, 283);
            pbBottom4.Name = "pbBottom4";
            pbBottom4.Size = new Size(50, 50);
            pbBottom4.TabIndex = 14;
            pbBottom4.TabStop = false;
            // 
            // pbBottom5
            // 
            pbBottom5.Image = Properties.Resources.dieBlank;
            pbBottom5.Location = new Point(276, 339);
            pbBottom5.Name = "pbBottom5";
            pbBottom5.Size = new Size(50, 50);
            pbBottom5.TabIndex = 15;
            pbBottom5.TabStop = false;
            // 
            // pbBottom6
            // 
            pbBottom6.Image = Properties.Resources.dieBlank;
            pbBottom6.Location = new Point(276, 395);
            pbBottom6.Name = "pbBottom6";
            pbBottom6.Size = new Size(50, 50);
            pbBottom6.TabIndex = 16;
            pbBottom6.TabStop = false;
            // 
            // pbBottom7
            // 
            pbBottom7.Image = Properties.Resources.dieBlank;
            pbBottom7.Location = new Point(332, 283);
            pbBottom7.Name = "pbBottom7";
            pbBottom7.Size = new Size(50, 50);
            pbBottom7.TabIndex = 17;
            pbBottom7.TabStop = false;
            // 
            // pbBottom8
            // 
            pbBottom8.Image = Properties.Resources.dieBlank;
            pbBottom8.Location = new Point(332, 339);
            pbBottom8.Name = "pbBottom8";
            pbBottom8.Size = new Size(50, 50);
            pbBottom8.TabIndex = 18;
            pbBottom8.TabStop = false;
            // 
            // pbBottom9
            // 
            pbBottom9.Image = Properties.Resources.dieBlank;
            pbBottom9.Location = new Point(332, 395);
            pbBottom9.Name = "pbBottom9";
            pbBottom9.Size = new Size(50, 50);
            pbBottom9.TabIndex = 19;
            pbBottom9.TabStop = false;
            // 
            // bLeft
            // 
            bLeft.Location = new Point(220, 461);
            bLeft.Name = "bLeft";
            bLeft.Size = new Size(50, 30);
            bLeft.TabIndex = 20;
            bLeft.Text = "Left";
            bLeft.UseVisualStyleBackColor = true;
            bLeft.Click += bLeft_OnClick;
            // 
            // bMid
            // 
            bMid.Location = new Point(276, 461);
            bMid.Name = "bMid";
            bMid.Size = new Size(50, 30);
            bMid.TabIndex = 21;
            bMid.Text = "Mid";
            bMid.UseVisualStyleBackColor = true;
            bMid.Click += bMid_OnClick;
            // 
            // bRight
            // 
            bRight.Location = new Point(332, 461);
            bRight.Margin = new Padding(0);
            bRight.Name = "bRight";
            bRight.Size = new Size(58, 30);
            bRight.TabIndex = 22;
            bRight.Text = "Right";
            bRight.UseVisualStyleBackColor = true;
            bRight.Click += bRight_OnClick;
            // 
            // lblTop
            // 
            lblTop.AutoSize = true;
            lblTop.Location = new Point(138, 101);
            lblTop.Name = "lblTop";
            lblTop.Size = new Size(76, 20);
            lblTop.TabIndex = 23;
            lblTop.Text = "Top's Turn";
            lblTop.Visible = false;
            // 
            // lblBottom
            // 
            lblBottom.AutoSize = true;
            lblBottom.Location = new Point(113, 354);
            lblBottom.Name = "lblBottom";
            lblBottom.Size = new Size(101, 20);
            lblBottom.TabIndex = 24;
            lblBottom.Text = "Bottom's Turn";
            // 
            // lblGameOver
            // 
            lblGameOver.AutoSize = true;
            lblGameOver.Location = new Point(256, 205);
            lblGameOver.Name = "lblGameOver";
            lblGameOver.Size = new Size(87, 20);
            lblGameOver.TabIndex = 25;
            lblGameOver.Text = "Game Over!";
            lblGameOver.Visible = false;
            // 
            // bStartOver
            // 
            bStartOver.Location = new Point(256, 235);
            bStartOver.Name = "bStartOver";
            bStartOver.Size = new Size(87, 36);
            bStartOver.TabIndex = 26;
            bStartOver.Text = "Start Over";
            bStartOver.UseVisualStyleBackColor = true;
            bStartOver.Visible = false;
            bStartOver.Click += bStartOver_onClick;
            // 
            // lblTopScore
            // 
            lblTopScore.AutoSize = true;
            lblTopScore.Location = new Point(108, 84);
            lblTopScore.Name = "lblTopScore";
            lblTopScore.Size = new Size(90, 20);
            lblTopScore.TabIndex = 27;
            lblTopScore.Text = "Top Score: 0";
            lblTopScore.Visible = false;
            // 
            // lblBottomScore
            // 
            lblBottomScore.AutoSize = true;
            lblBottomScore.Location = new Point(83, 334);
            lblBottomScore.Name = "lblBottomScore";
            lblBottomScore.Size = new Size(115, 20);
            lblBottomScore.TabIndex = 28;
            lblBottomScore.Text = "Bottom Score: 0";
            lblBottomScore.Visible = false;
            // 
            // Game
            // 
            ClientSize = new Size(485, 588);
            Controls.Add(lblBottomScore);
            Controls.Add(lblTopScore);
            Controls.Add(bStartOver);
            Controls.Add(lblGameOver);
            Controls.Add(lblBottom);
            Controls.Add(lblTop);
            Controls.Add(bRight);
            Controls.Add(bMid);
            Controls.Add(bLeft);
            Controls.Add(pbBottom9);
            Controls.Add(pbBottom8);
            Controls.Add(pbBottom7);
            Controls.Add(pbBottom6);
            Controls.Add(pbBottom5);
            Controls.Add(pbBottom4);
            Controls.Add(pbBottom3);
            Controls.Add(pbBottom2);
            Controls.Add(pbBottom1);
            Controls.Add(pbTop9);
            Controls.Add(pbTop8);
            Controls.Add(pbTop7);
            Controls.Add(pbTop6);
            Controls.Add(pbTop5);
            Controls.Add(pbTop4);
            Controls.Add(pbTop3);
            Controls.Add(pbTop2);
            Controls.Add(pbTop1);
            Controls.Add(bRoll);
            Controls.Add(pbCurrent);
            Name = "Game";
            Text = "Game";
            ((ISupportInitialize)pbCurrent).EndInit();
            ((ISupportInitialize)pbTop1).EndInit();
            ((ISupportInitialize)pbTop2).EndInit();
            ((ISupportInitialize)pbTop3).EndInit();
            ((ISupportInitialize)pbTop4).EndInit();
            ((ISupportInitialize)pbTop5).EndInit();
            ((ISupportInitialize)pbTop6).EndInit();
            ((ISupportInitialize)pbTop7).EndInit();
            ((ISupportInitialize)pbTop8).EndInit();
            ((ISupportInitialize)pbTop9).EndInit();
            ((ISupportInitialize)pbBottom1).EndInit();
            ((ISupportInitialize)pbBottom2).EndInit();
            ((ISupportInitialize)pbBottom3).EndInit();
            ((ISupportInitialize)pbBottom4).EndInit();
            ((ISupportInitialize)pbBottom5).EndInit();
            ((ISupportInitialize)pbBottom6).EndInit();
            ((ISupportInitialize)pbBottom7).EndInit();
            ((ISupportInitialize)pbBottom8).EndInit();
            ((ISupportInitialize)pbBottom9).EndInit();
            ResumeLayout(false);
            PerformLayout();
        }

        /* input: automatically generated by form designer. called upon clicking the bRoll button
         * this function calls rollDie and places the value in the currentDie value
         * it then places the appropriate die image resource in the pbCurrent PictureBox
         * output: void
         */
        private void bRoll_onClick(object sender, EventArgs e)
        {
            currentDie = rollDie();
            switch (currentDie)
            {
                case 1:
                    pbCurrent.Image = Properties.Resources.die1;
                    break;
                case 2:
                    pbCurrent.Image = Properties.Resources.die2;
                    break;
                case 3:
                    pbCurrent.Image = Properties.Resources.die3;
                    break;
                case 4:
                    pbCurrent.Image = Properties.Resources.die4;
                    break;
                case 5:
                    pbCurrent.Image = Properties.Resources.die5;
                    break;
                case 6:
                    pbCurrent.Image = Properties.Resources.die6;
                    break;
                default:
                    pbCurrent.Image = Properties.Resources.dieBlank;
                    currentDie = 0;
                    break;
            }
            pbCurrent.Refresh();
        }

        /* input: automatically generated by form designer. called upon clicking the bLeft button
         * (1/3) these 3 functions do most of the work. in short, they handle the placement of the dice to the user
         * specified locations. for specifics, read through the inline comments below
         * output: void
         */
        private void bLeft_OnClick(object sender, EventArgs e)
        {
            if (currentDie == 0)//make sure currentDie is not empty
                return;
            int open;
            if (turn) //determine whether it is top or bottom's turn
                open = isColFullBottom(0); //check for open space in bottom left column
            else
                open = isColFullTop(0); //check for open space in top left column
            if (open == -1)//if column is full, do nothing and allow the user to click another button
            {
                return;
            }
            if (turn)//bottom's turn:
            {
                placeBottom(open, currentDie);//place currentDie in open spot found above
                destroyTop(0);//remove matching dice from opponent's column
                
                //reset currentDie
                currentDie = 0;
                pbCurrent.Image = Properties.Resources.dieBlank;
                pbCurrent.Refresh();
                
                //prepare for top's turn
                turn = false;
                lblBottom.Visible = false;
                lblTop.Visible = true;
            }
            else//top's turn:
            {
                placeTop(open, currentDie);//place currentDie in open spot found above
                destroyBottom(0);//remove matching dice from opponent's column
                
                //reset currentDie
                currentDie = 0;
                pbCurrent.Image = Properties.Resources.dieBlank;
                pbCurrent.Refresh();

                //prepare for bottom's turn
                turn = true;
                lblTop.Visible = false;
                lblBottom.Visible = true;
            }
            isOver();//check to see if the game has ended (either array is full)
        }

        /* input: automatically generated by form designer. called upon clicking the bMid button
         * (2/3) these 3 functions do most of the work. in short, they handle the placement of the dice to the user
         * specified locations. for specifics, read through the inline comments below
         * output: void
         */
        private void bMid_OnClick(object sender, EventArgs e)
        {
            if (currentDie == 0)//make sure currentDie is not empty
                return;
            int open;
            if (turn)//determine whether it is top or bottom's turn
                open = isColFullBottom(3); //check for open space in bottom mid column
            else
                open = isColFullTop(3); //check for open space in top mid column
            if (open == -1)
            {
                return;
            }
            if (turn)//bottom's turn
            {
                placeBottom(3 + open, currentDie);//place currentDie in open spot found above
                destroyTop(3);//remove matching dice from opponent's column

                //reset currentDie
                currentDie = 0;
                pbCurrent.Image = Properties.Resources.dieBlank;
                pbCurrent.Refresh();
                
                //prepare for top's turn
                turn = false;
                lblBottom.Visible = false;
                lblTop.Visible = true;
            }
            else//top's turn
            {
                placeTop(3 + open, currentDie);//place currentDie in open spot found above
                destroyBottom(3);//remove matching dice from opponent's column

                //reset currentDie
                currentDie = 0;
                pbCurrent.Image = Properties.Resources.dieBlank;
                pbCurrent.Refresh();

                //prepare for bottom's turn
                turn = true;
                lblTop.Visible = false;
                lblBottom.Visible = true;
            }
            isOver();//check to see if the game has ended
        }

        /* input: automatically generated by form designer. called upon clicking the bRight button
         * (3/3) these 3 functions do most of the work. in short, they handle the placement of the dice to the user
         * specified locations. for specifics, read through the inline comments below
         * output: void
         */
        private void bRight_OnClick(object sender, EventArgs e)
        {
            if (currentDie == 0)//make sure currentDie is not empty
                return;
            int open;
            if (turn)//determine whether it is top or bottom's turn
                open = isColFullBottom(6); //check for open space in bottom right column
            else
                open = isColFullTop(6);//check for open space in top right column
            if (open == -1)
            {
                return;
            }
            if (turn)//bottom's turn
            {
                placeBottom(6 + open, currentDie);//place currentDie in open spot found above
                destroyTop(6);//remove matching dice from opponent's column

                //reset currentDie
                currentDie = 0;
                pbCurrent.Image = Properties.Resources.dieBlank;
                pbCurrent.Refresh();

                //prepare for top's turn
                turn = false;
                lblBottom.Visible = false;
                lblTop.Visible = true;
            }
            else//top's turn
            {
                placeTop(6 + open, currentDie);//place currentDie in open spot found above
                destroyBottom(6);//remove matching dice from opponent's column

                //reset currentDie
                currentDie = 0;
                pbCurrent.Image = Properties.Resources.dieBlank;
                pbCurrent.Refresh();

                //prepare for bottom's turn
                turn = true;
                lblTop.Visible = false;
                lblBottom.Visible = true;
            }
            isOver();//check to see if game has ended
        }

        /*input: automatically generated by form designer. called upon clicking the bStartOver button
         * this function handles reseting all game assets and values to the starting gamestate
         * return: void
         */
        private void bStartOver_onClick(object sender, EventArgs e)
        {
            for (int i = 0; i < 9; i++)//set all array values to 0
            {
                top[i] = 0;
                bottom[i] = 0;
            }
            currentDie = 0;//set currentDie to 0
            syncAllResources();//sync all PictureBoxes to the correct resource value

            //vanish game over elements
            lblGameOver.Visible = false;
            bStartOver.Visible = false;

            //set turn data to start
            turn = true;
            lblBottom.Visible = true;
            lblTop.Visible = false;

            //vanish score elements
            lblTopScore.Visible = false;
            lblBottomScore.Visible = false;
        }

        /* input: ints- pos, val | position in bottom at which to place an image resource; value of image to be placed
         * this function handles the logic behind placing images in the bottom board
         * output: void
         */
        private void placeBottom(int pos, int val)
        {
            bottom[pos] = val;//start by setting the value in the array to the value passed in

            switch (pos)//switch:case to adjust the correct PictureBox
            {
                case 0:
                    pbBottom1.Image = placeImage(val);//change image in PictureBox
                    pbBottom1.Refresh();//refresh PictureBox
                    break;
                case 1:
                    pbBottom2.Image = placeImage(val);//as above
                    pbBottom2.Refresh();
                    break;
                case 2:
                    pbBottom3.Image = placeImage(val);
                    pbBottom3.Refresh();
                    break;
                case 3:
                    pbBottom4.Image = placeImage(val);
                    pbBottom4.Refresh();
                    break;
                case 4:
                    pbBottom5.Image = placeImage(val);
                    pbBottom5.Refresh();
                    break;
                case 5:
                    pbBottom6.Image = placeImage(val);
                    pbBottom6.Refresh();
                    break;
                case 6:
                    pbBottom7.Image = placeImage(val);
                    pbBottom7.Refresh();
                    break;
                case 7:
                    pbBottom8.Image = placeImage(val);
                    pbBottom8.Refresh();
                    break;
                case 8:
                    pbBottom9.Image = placeImage(val);
                    pbBottom9.Refresh();
                    break;
            }
        }

        /* input: ints- pos, val | position in top at which to place an image resource; value of image to be placed
         * this function handles the logic behind placing images in the top board
         * output: void
         */
        private void placeTop(int pos, int val)
        {
            top[pos] = val;//start by setting the value in the array to the value passed in

            switch (pos)//switch:case to adjust the correct PictureBox
            {
                case 0:
                    pbTop1.Image = placeImage(val);//change image in PictureBox
                    pbTop1.Refresh();//refresh PictureBox
                    break;
                case 1:
                    pbTop2.Image = placeImage(val);//as above
                    pbTop2.Refresh();
                    break;
                case 2:
                    pbTop3.Image = placeImage(val);
                    pbTop3.Refresh();
                    break;
                case 3:
                    pbTop4.Image = placeImage(val);
                    pbTop4.Refresh();
                    break;
                case 4:
                    pbTop5.Image = placeImage(val);
                    pbTop5.Refresh();
                    break;
                case 5:
                    pbTop6.Image = placeImage(val);
                    pbTop6.Refresh();
                    break;
                case 6:
                    pbTop7.Image = placeImage(val);
                    pbTop7.Refresh();
                    break;
                case 7:
                    pbTop8.Image = placeImage(val);
                    pbTop8.Refresh();
                    break;
                case 8:
                    pbTop9.Image = placeImage(val);
                    pbTop9.Refresh();
                    break;
            }

        }

        /* input: int val | the value of resource image to fetch
         * this function handles fetching resource values of the correct die value using a switch case
         * output: Image | the resource that matches the value passed in
         */
        private Image placeImage(int val)
        {
            switch (val)
            {
                case 1:
                    return Properties.Resources.die1;
                case 2:
                    return Properties.Resources.die2;
                case 3:
                    return Properties.Resources.die3;
                case 4:
                    return Properties.Resources.die4;
                case 5:
                    return Properties.Resources.die5;
                case 6:
                    return Properties.Resources.die6;
                default:
                    return Properties.Resources.dieBlank;
            }
        }

        /* input: int col | the element in the array at which the target column begins (0=left, 3=mid, 6=right)
         * this function replaces any values in the bottom array that match the value in currentDie with 0 and dieBlank
         * output: void
         */
        private void destroyBottom(int col)
        {
            bool destroy = false;//changes to true if any values are removed. used to prevent unecessary use of checkGravity()
            for (int i = 0; i < 3; i++)
            {
                if (bottom[col + i] == currentDie)//check each value in the column
                {
                    bottom[col + i] = 0;
                    placeBottom(col + i, 0);
                    destroy = true;
                }
            }
            if (destroy)
                checkGravity(col);
        }

        /* input: int col | the element in the array at which the target column begins (0=left, 3=mid, 6=right)
         * this function replaces any values in the top array that match the value in currentDie with 0 and dieBlank
         * output: void
         */
        private void destroyTop(int col)
        {
            bool destroy = false;//changes to true if any values are removed. used to prevent unecessary use of checkGravity()
            for (int i = 0; i < 3; i++)
            {
                if (top[col + i] == currentDie)//check each value in the column
                {
                    top[col + i] = 0;
                    placeTop(col + i, 0);
                    destroy = true;
                }
            }
            if (destroy)
                checkGravity(col);
        }

        /* input: int col | the element in the array at which the target column begins (0=left, 3=mid, 6=right)
         * this function looks for bubbles in the game boards and moves dice towards the center to get rid of them
         * output: void
         */
        private void checkGravity(int col)
        {
            for (int i = 0; top[col] == 0 && i < 3; i++)//for loop to catch bottom-two-deletions
            {
                //move everything down a row
                top[col] = top[col + 1];
                top[col + 1] = top[col + 2];
                top[col + 2] = 0;
            }
            if (top[col + 1] == 0)//check the 2nd row in case the first row is occupied
            {
                //move top two down a row
                top[col + 1] = top[col + 2];
                top[col + 2] = 0;
            }

            for (int i = 0; bottom[col] == 0 && i < 3; i++)//for loop to catch bottom-two-deletions
            {
                //move everything down a row
                bottom[col] = bottom[col + 1];
                bottom[col + 1] = bottom[col + 2];
                bottom[col + 2] = 0;
            }
            if (bottom[col + 1] == 0)//check the 2nd row in case the first row is occupied
            {
                //move top two down a row
                bottom[col + 1] = bottom[col + 2];
                bottom[col + 2] = 0;
            }
            syncAllResources();
        }

        /* input: none
         * this function syncs all PictureBoxes with their corresponding array values
         * output: none
         */
        private void syncAllResources()
        {
            for (int i = 0; i < 9; i++)
            {
                placeTop(i, top[i]);
                placeBottom(i, bottom[i]);
                pbCurrent.Image = placeImage(currentDie);
            }
        }

        /* input: none
         * this function runs at the end of every turn to determine whether the game has ended
         * output: void
         */
        private void isOver()
        {
            bool topFull = true, bottomFull = true;//set two bool control values to true, change to false if a 0 is found
            for (int i = 0; i < 9; i++)//check both arrays for open spots
            {
                if (bottom[i] == 0)
                    bottomFull = false;

                if (top[i] == 0)
                    topFull = false;
            }
            if (topFull || bottomFull)//both values must be false for the game to continue
            {
                //run game end code
                lblGameOver.Visible = true;
                bStartOver.Visible = true;
                lblTopScore.Visible = true;
                lblBottomScore.Visible = true;
                lblTop.Visible = false;
                lblBottom.Visible = false;
                scoreCalc();//calculate score
            }
        }

        /* input: none
         * this function calculates the score of both the top and bottom boards
         * output: none
         */
        private void scoreCalc()
        {
            int topScore = 0;
            int bottomScore = 0;
            for (int i = 0; i < 9; i += 3)
            {
                topScore += top[i] + top[i + 1] + top[i + 2];//start by summing the column
                if (top[i + 2] == top[i + 1] && top[i + 2] == top[i])//if all 3 are the same value
                {
                    topScore += top[i + 2] * 6;//multiply by 6 (3 for number of dice in column, 2 for triple stack bonus)
                }
                else if (top[i + 2] == top[i + 1] || top[i + 2] == top[i])//if 2 are the same
                {
                    topScore += top[i + 2] * 2;//add the two dice again for double stack bonus
                }
                else if (top[i + 1] == top[i])//same as previous if
                {
                    topScore += top[i] * 2;
                }
            }

            //this for loop is identical to the above loop except for the bottom array
            for (int i = 0; i < 9; i += 3)
            {
                bottomScore += bottom[i] + bottom[i + 1] + bottom[i + 2];
                if (bottom[i + 2] == bottom[i + 1] && bottom[i + 2] == bottom[i])
                {
                    bottomScore += bottom[i + 2] * 6;
                }
                else if (bottom[i + 2] == bottom[i + 1] || bottom[i + 2] == bottom[i])
                {
                    bottomScore += bottom[i + 2] * 2;
                }
                else if (bottom[i + 1] == bottom[i])
                {
                    bottomScore += bottom[i] * 2;
                }
            }

            //place score values in the labels to be displayed.
            lblTopScore.Text = "Top Score: " + topScore;

            lblBottomScore.Text = "Bottom Score: " + bottomScore;
        }
    }
}